from collections import UserDict
from datetime import datetime

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

class Name(Field):
    def __init__(self, value):
        super().__init__(value)

class Birthday(Field):
    def __init__(self, value):
        self.__value = None
        super().__init__(value)

    @property
    def value(self):
        return self.__value
        
    @value.setter
    def value(self, value):
        try:
            value_date = datetime.strptime(value, '%d.%m.%Y').date()
            self.__value = value_date
        except ValueError:
            raise ValueError ('Enter date in this format: dd.mm.yyyy')

class Phone(Field):
    def __init__(self, value):
        self.__value = None
        super().__init__(value)
        
    @property
    def value(self):
        return self.__value
        
    @value.setter
    def value(self, value):
        if len(value) == 10 and len(list(filter(lambda num: num.isnumeric(), value))) == 10:
            self.__value = value
        else:
            raise ValueError ('Phone can only contains 10 digits.')
        
class Record:
    def __init__(self, name, birthday):
        self.name = Name(name)
        self.phones = []
        self.birthday = Birthday(birthday)

    def add_phone(self, value):
        self.phones.append(Phone(value))
    
    def remove_phone(self, value):
        for elem in self.phones:
            if elem.value == value:
                self.phones.remove(elem)
    
    def edit_phone(self, old_phone, new_phone):
        if old_phone not in map(lambda phone: phone.value, self.phones):
            raise ValueError
        for phone in self.phones:
            if phone.value == old_phone:
                self.phones.remove(phone)
                self.phones.append(Phone(new_phone))
    
    def find_phone(self, value):
        for elem in self.phones:
            if elem.value == value:
                return elem

    def days_to_birthday(self):
        birthday_this_year = datetime(datetime.now().year, self.birthday.value.month, self.birthday.value.day)
        if datetime.now() > birthday_this_year:
            birthday_this_year = datetime(datetime.now().year + 1, self.birthday.value.month, self.birthday.value.day)
        remaining_days = (birthday_this_year - datetime.now())
        return f'To {self.name.value}`s birthday remains {remaining_days.days} days.'
        
    def __str__(self):
        return f"Contact name: {self.name.value}, phones: {'; '.join(p.value for p in self.phones)}, birthday: {self.birthday.value}"

class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record
    
    def find(self, name):
        for record in self.data:
            if name == record:
                return self.data[name]
    
    def delete(self, name):
        for record in self.data:
            if name == record:
                self.data.pop(record)
                break
    
    def iterator(self, records_per_time=1):
        current_index = 0
        record_values = [record.__str__() for record in self.data.values()]
        while current_index < len(record_values):
            result = record_values[current_index:current_index + records_per_time]
            yield result
            current_index += records_per_time
       
    




